<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1 (Python 3.10.11 on win32)" generated="20230730 12:33:38.745" rpa="false" schemaversion="4">
<suite id="s1" name="Database Lib" source="d:\Sauvegarde travaux Cham\Robot_Framework\Robot_Framework_practice\database\database_lib.robot">
<kw name="Connect to SQLiteDB" type="SETUP">
<tag>db</tag>
<tag>smoke</tag>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database="${DB_NAME}", isolation_level=None</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20230730 12:33:39.503" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database="D:\Sauvegarde travaux Cham\Robot_Framework\Robot_Framework_practice\database\my_database.db", isolation_level=None)) </msg>
<status status="PASS" starttime="20230730 12:33:39.497" endtime="20230730 12:33:39.510"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.496" endtime="20230730 12:33:39.511"/>
</kw>
<test id="s1-t1" name="Insert a IPv4 column with data on each row in the table" line="35">
<kw name="Query" library="DatabaseLibrary">
<var>@{rowid_list}</var>
<arg>SELECT rowid FROM people</arg>
<arg>return=list</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230730 12:33:39.512" level="INFO">Executing : Query  |  SELECT rowid FROM people </msg>
<msg timestamp="20230730 12:33:39.513" level="INFO">@{rowid_list} = [ (1,) | (2,) | (3,) | (4,) | (5,) | (6,) ]</msg>
<status status="PASS" starttime="20230730 12:33:39.512" endtime="20230730 12:33:39.513"/>
</kw>
<for flavor="IN">
<var>${iterated_row_id}</var>
<value>@{rowid_list}</value>
<iter>
<var name="${iterated_row_id}">(1,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:39.526" level="INFO">${ipv4} = 218.98.26.134</msg>
<status status="PASS" starttime="20230730 12:33:39.515" endtime="20230730 12:33:39.526"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:39.527" endtime="20230730 12:33:39.527"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:39.528" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '218.98.26.134' WHERE rowid=1; </msg>
<msg timestamp="20230730 12:33:39.653" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:39.528" endtime="20230730 12:33:39.653"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.514" endtime="20230730 12:33:39.653"/>
</iter>
<iter>
<var name="${iterated_row_id}">(2,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:39.654" level="INFO">${ipv4} = 70.77.130.72</msg>
<status status="PASS" starttime="20230730 12:33:39.653" endtime="20230730 12:33:39.654"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:39.654" endtime="20230730 12:33:39.655"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:39.656" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '70.77.130.72' WHERE rowid=2; </msg>
<msg timestamp="20230730 12:33:39.751" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:39.655" endtime="20230730 12:33:39.752"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.653" endtime="20230730 12:33:39.752"/>
</iter>
<iter>
<var name="${iterated_row_id}">(3,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:39.753" level="INFO">${ipv4} = 61.109.216.124</msg>
<status status="PASS" starttime="20230730 12:33:39.752" endtime="20230730 12:33:39.753"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:39.753" endtime="20230730 12:33:39.754"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:39.755" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '61.109.216.124' WHERE rowid=3; </msg>
<msg timestamp="20230730 12:33:39.861" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:39.754" endtime="20230730 12:33:39.861"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.752" endtime="20230730 12:33:39.861"/>
</iter>
<iter>
<var name="${iterated_row_id}">(4,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:39.862" level="INFO">${ipv4} = 158.29.130.135</msg>
<status status="PASS" starttime="20230730 12:33:39.861" endtime="20230730 12:33:39.862"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:39.862" endtime="20230730 12:33:39.863"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:39.866" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '158.29.130.135' WHERE rowid=4; </msg>
<msg timestamp="20230730 12:33:39.985" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:39.865" endtime="20230730 12:33:39.985"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.861" endtime="20230730 12:33:39.985"/>
</iter>
<iter>
<var name="${iterated_row_id}">(5,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:39.986" level="INFO">${ipv4} = 199.185.254.132</msg>
<status status="PASS" starttime="20230730 12:33:39.986" endtime="20230730 12:33:39.986"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:39.987" endtime="20230730 12:33:39.988"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:39.989" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '199.185.254.132' WHERE rowid=5; </msg>
<msg timestamp="20230730 12:33:40.086" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:39.988" endtime="20230730 12:33:40.086"/>
</kw>
<status status="PASS" starttime="20230730 12:33:39.986" endtime="20230730 12:33:40.086"/>
</iter>
<iter>
<var name="${iterated_row_id}">(6,)</var>
<kw name="Ipv 4" library="FakerLibrary">
<var>${ipv4}</var>
<doc>Returns a random IPv4 address or network with a valid CIDR.</doc>
<msg timestamp="20230730 12:33:40.087" level="INFO">${ipv4} = 53.9.122.183</msg>
<status status="PASS" starttime="20230730 12:33:40.087" endtime="20230730 12:33:40.087"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ipv4}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230730 12:33:40.087" endtime="20230730 12:33:40.089"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>UPDATE people SET ipv4 = '${ipv4}' WHERE rowid=${iterated_row_id[0]};</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230730 12:33:40.090" level="INFO">Executing : Execute SQL String  |  UPDATE people SET ipv4 = '53.9.122.183' WHERE rowid=6; </msg>
<msg timestamp="20230730 12:33:40.194" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230730 12:33:40.089" endtime="20230730 12:33:40.194"/>
</kw>
<status status="PASS" starttime="20230730 12:33:40.087" endtime="20230730 12:33:40.194"/>
</iter>
<status status="PASS" starttime="20230730 12:33:39.514" endtime="20230730 12:33:40.194"/>
</for>
<status status="PASS" starttime="20230730 12:33:39.511" endtime="20230730 12:33:40.195"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20230730 12:33:40.198" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230730 12:33:40.198" endtime="20230730 12:33:40.199"/>
</kw>
<status status="PASS" starttime="20230730 12:33:38.777" endtime="20230730 12:33:40.199"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Database Lib">Database Lib</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
